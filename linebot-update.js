// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô lineBotHandler.js

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô default settings
function getDefaultFlexSettings() {
    return {
        welcome: { /* existing settings */ },
        form: { /* existing settings */ },
        confirm: { /* existing settings */ },
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
        status: {
            primaryColor: '#10b981',
            completedColor: '#10b981',
            currentColor: '#f59e0b',
            pendingColor: '#94a3b8',
            bgColor: '#f8fafc',
            lineColor: '#d1d5db',
            headerIcon: 'üìä',
            title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°',
            requestId: '2024-001',
            notificationText: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö',
            stepCount: 5,
            currentStep: 2,
            iconStyle: 'emoji',
            iconSize: '20px',
            showDetails: 'true',
            showTime: 'true',
            connectionStyle: 'line',
            dotSize: '12px',
            steps: [
                { title: '‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠', detail: '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö', icon: 'üì•', time: '10:30', status: 'completed' },
                { title: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö', detail: '‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', icon: 'üîç', time: '11:15', status: 'current' },
                { title: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', detail: '‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', icon: '‚úÖ', time: '-', status: 'pending' },
                { title: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', detail: '‡∏ä‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á', icon: 'üîß', time: '-', status: 'pending' },
                { title: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', detail: '‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', icon: 'üéâ', time: '-', status: 'pending' }
            ]
        },
        progress: { /* existing settings */ },
        timeline: { /* existing settings */ }
    };
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Timeline Status Message
function createTimelineStatusFlexMessage(requestData, currentStatus, customSettings = null) {
    const settings = customSettings || currentFlexSettings.status;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    const statusStepMapping = {
        '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': 1,
        '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏ä‡πà‡∏≤‡∏á': 2,
        '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£': 4,
        '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô': 5,
        '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£': 3,
        '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': 0
    };
    
    const currentStep = statusStepMapping[currentStatus] || 1;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const steps = [...settings.steps];
    for (let i = 0; i < steps.length; i++) {
        if (i + 1 < currentStep) {
            steps[i].status = 'completed';
            steps[i].time = requestData.LAST_UPDATED || new Date().toLocaleTimeString('th-TH', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        } else if (i + 1 === currentStep) {
            steps[i].status = 'current';
            steps[i].time = new Date().toLocaleTimeString('th-TH', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
        } else {
            steps[i].status = 'pending';
            steps[i].time = '-';
        }
    }
    
    return {
        type: "flex",
        altText: `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${currentStatus}`,
        contents: {
            type: "bubble",
            header: {
                type: "box",
                layout: "vertical",
                contents: [
                    {
                        type: "text",
                        text: `${settings.headerIcon} ${settings.title}`,
                        weight: "bold",
                        size: "lg",
                        color: "#ffffff",
                        align: "center"
                    }
                ],
                backgroundColor: settings.primaryColor,
                paddingAll: "20px"
            },
            body: {
                type: "box",
                layout: "vertical",
                contents: [
                    // Notification card
                    {
                        type: "box",
                        layout: "vertical",
                        contents: [
                            {
                                type: "text",
                                text: `üé´ ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏Ç‡∏≠: ${requestData.REQUEST_ID || settings.requestId}`,
                                weight: "bold",
                                size: "md",
                                color: "#ffffff",
                                align: "center"
                            },
                            {
                                type: "text",
                                text: settings.notificationText,
                                size: "sm",
                                color: "rgba(255,255,255,0.9)",
                                align: "center",
                                margin: "sm",
                                wrap: true
                            }
                        ],
                        backgroundColor: `${settings.primaryColor}CC`,
                        paddingAll: "15px",
                        cornerRadius: "8px",
                        margin: "none"
                    },
                    {
                        type: "separator",
                        margin: "lg",
                        color: settings.lineColor
                    },
                    // Timeline steps
                    ...generateTimelineSteps(steps, settings)
                ],
                paddingAll: "20px",
                backgroundColor: settings.bgColor
            },
            footer: {
                type: "box",
                layout: "vertical",
                contents: [
                    {
                        type: "button",
                        style: "link",
                        action: {
                            type: "message",
                            label: "üìä ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
                            text: "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°"
                        }
                    }
                ],
                paddingAll: "20px",
                backgroundColor: "#f8fafc"
            }
        }
    };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô Timeline
function generateTimelineSteps(steps, settings) {
    const timelineContents = [];
    
    for (let i = 0; i < steps.length; i++) {
        const step = steps[i];
        const isLast = i === steps.length - 1;
        
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        let stepColor = settings.pendingColor;
        let stepBgColor = '#f9fafb';
        let statusIcon = '‚è∏Ô∏è';
        
        if (step.status === 'completed') {
            stepColor = settings.completedColor;
            stepBgColor = '#f0fdf4';
            statusIcon = '‚úÖ';
        } else if (step.status === 'current') {
            stepColor = settings.currentColor;
            stepBgColor = '#fffbeb';
            statusIcon = '‚è≥';
        }
        
        // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
        let iconContent = step.icon;
        if (settings.iconStyle === 'numbers') {
            iconContent = (i + 1).toString();
        } else if (settings.iconStyle === 'dots') {
            iconContent = '‚óè';
        } else if (settings.iconStyle === 'checks') {
            iconContent = step.status === 'completed' ? '‚úì' : (step.status === 'current' ? '‚óè' : '‚óã');
        }
        
        // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
        const stepContent = {
            type: "box",
            layout: "horizontal",
            contents: [
                // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
                {
                    type: "box",
                    layout: "vertical",
                    contents: [
                        {
                            type: "text",
                            text: iconContent,
                            size: settings.iconSize,
                            color: "#ffffff",
                            weight: "bold",
                            align: "center"
                        }
                    ],
                    width: settings.dotSize,
                    height: settings.dotSize,
                    backgroundColor: stepColor,
                    cornerRadius: "50px",
                    justifyContent: "center",
                    alignItems: "center",
                    flex: 0,
                    margin: "none"
                },
                // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                {
                    type: "box",
                    layout: "vertical",
                    contents: [
                        {
                            type: "box",
                            layout: "horizontal",
                            contents: [
                                {
                                    type: "text",
                                    text: step.title,
                                    weight: "bold",
                                    size: "sm",
                                    color: "#1f2937",
                                    flex: 1
                                },
                                {
                                    type: "text",
                                    text: statusIcon,
                                    size: "md",
                                    flex: 0
                                }
                            ]
                        },
                        ...(settings.showDetails === 'true' ? [
                            {
                                type: "text",
                                text: step.detail,
                                size: "xs",
                                color: "#6b7280",
                                wrap: true,
                                margin: "xs"
                            }
                        ] : []),
                        ...(settings.showTime === 'true' && step.time !== '-' ? [
                            {
                                type: "text",
                                text: step.time,
                                size: "xs",
                                color: stepColor,
                                weight: "bold",
                                margin: "xs"
                            }
                        ] : [])
                    ],
                    backgroundColor: stepBgColor,
                    paddingAll: "12px",
                    cornerRadius: "8px",
                    borderWidth: "medium",
                    borderColor: stepColor,
                    margin: "sm",
                    flex: 1
                }
            ],
            spacing: "sm",
            margin: isLast ? "lg" : "md"
        };
        
        timelineContents.push(stepContent);
        
        // ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
        if (!isLast) {
            const connectionContent = {
                type: "box",
                layout: "vertical",
                contents: [
                    {
                        type: "separator",
                        color: settings.lineColor
                    }
                ],
                margin: "sm",
                paddingStart: `${parseInt(settings.dotSize)/2}px`
            };
            timelineContents.push(connectionContent);
        }
    }
    
    return timelineContents;
}

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sendStatusUpdateToUser ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Timeline ‡πÅ‡∏ó‡∏ô
async function sendStatusUpdateToUser(requestDetails, newStatus, technicianNotes) {
    try {
        if (requestDetails.LINE_USER_ID && newStatus) {
            // ‡πÉ‡∏ä‡πâ Timeline Status Message ‡πÅ‡∏ó‡∏ô simple status update
            const timelineStatusMessage = createTimelineStatusFlexMessage(requestDetails, newStatus);
            await lineService.pushMessage(requestDetails.LINE_USER_ID, [timelineStatusMessage]);
            
            // ‡∏™‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏¢‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (technicianNotes) {
                const noteMessage = {
                    type: 'text',
                    text: `üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏à‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà:\n${technicianNotes}`
                };
                await lineService.pushMessage(requestDetails.LINE_USER_ID, [noteMessage]);
            }
            
            // Send Telegram notification
            await notificationService.sendStatusUpdateNotification(requestDetails, newStatus, technicianNotes);
        }
    } catch (error) {
        console.error(`‚ö†Ô∏è Failed to send timeline status update to user ${requestDetails.LINE_USER_ID}:`, error.message);
        throw error;
    }
}

// Export ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
module.exports = {
    // ‡πÄ‡∏î‡∏¥‡∏°...
    handleWebhook,
    handlePersonalInfoSubmission,
    handleRepairFormSubmission,
    sendStatusUpdateToUser,
    updateFlexSettings,
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    createTimelineStatusFlexMessage,
    generateTimelineSteps,
    
    // ‡πÄ‡∏î‡∏¥‡∏°...
    createWelcomeFlexMessage,
    createPersonalInfoFormFlexMessage,
    createRepairFormFlexMessage,
    createPersonalInfoConfirmationFlexMessage,
    createRepairConfirmationFlexMessage,
    createStatusUpdateFlexMessage,
    createTrackingMethodFlexMessage,
    createTrackingResultFlexMessage,
    setUserState,
    getUserState,
    setUserData,
    getUserData,
    clearUserStateAndData,
    getDefaultFlexSettings
};